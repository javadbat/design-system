{"version":3,"file":"JBEditor.js","sources":["../lib/ParserHelper.js","../lib/inputs/paragraph-input/ParagraphInput.js","../lib/inputs/InputFactory.js","../lib/JBEditor.js"],"sourcesContent":["class ParserHelper {\r\n    /**\r\n    * @param {string} string\r\n    * @return {object}\r\n    */\r\n    textToValueObject(string) {\r\n        const returnObj = {\r\n            type: 'PARAGRAPH',\r\n            value: string\r\n        };\r\n        return returnObj;\r\n    }\r\n    /**\r\n    * @param {string} html\r\n    * @return {object}\r\n    */\r\n    htmlStringToValueObject(html) {\r\n        const elem = document.createRange().createContextualFragment(html);\r\n        const res = this.getStandardObjectFromDom(elem);\r\n        return res;\r\n    }\r\n    /**\r\n    * @param {HTMLElement} dom\r\n    * @return {object}\r\n    */\r\n    htmlDomToValueObject(dom) {\r\n        const obj = {\r\n            type: this.extractType(dom),\r\n            value: []\r\n        };\r\n        if (dom.children.length > 0) {\r\n            dom.children.forEach(element => {\r\n                const elementValue = this.htmlDomToValueObject(element);\r\n                //TODO://make flat function smart base on type\r\n                obj.value.push(elementValue);\r\n            });\r\n        } else {\r\n            obj.value = dom.innerText;\r\n        }\r\n        return obj;\r\n    }\r\n    /**\r\n    * @param {HTMLElement} dom\r\n    * @return {object}\r\n    */\r\n    getStandardObjectFromDom(dom) {\r\n        const obj = this.htmlDomToValueObject(dom);\r\n        const returnObj = this.standardFlatValueObject(obj);\r\n        return returnObj;\r\n    }\r\n    /**\r\n    * @param {HTMLElement} dom\r\n    * @return {string}\r\n    */\r\n    extractType(dom) {\r\n        switch(dom.nodeName.toUpperCase()){\r\n            case 'SPAN':\r\n            case 'EM':\r\n            case 'B':\r\n                console.log(dom.nodeName);\r\n                return 'INLINE_TEXT';\r\n            default:\r\n                return 'PARAGRAPH';  \r\n        }\r\n        \r\n    }\r\n    standardFlatValueObject(valueObject) {\r\n        const standardObj = {\r\n            type: valueObject.type,\r\n            value: []\r\n        };\r\n        if (Array.isArray(valueObject.value)) {\r\n            valueObject.value.forEach((item) => {\r\n                if (Array.isArray(item.value)) {\r\n                    const standaredArr = this.standardFlatValueObject(item).value;\r\n                    standardObj.value = [...standardObj.value, ...standaredArr];\r\n                } else {\r\n                    standardObj.value = [...standardObj.value, item];\r\n                }\r\n\r\n            });\r\n        } else {\r\n            standardObj.value = valueObject.value;\r\n        }\r\n\r\n        return standardObj;\r\n    }\r\n}\r\nexport { ParserHelper };","\r\nimport CSS from './ParagraphInput.scss';\r\nimport { ParserHelper } from '../../ParserHelper';\r\nimport { element } from 'prop-types';\r\nclass JBButtonWebComponent extends HTMLElement {\r\n    get value(){\r\n        return this.editableElement.innerText;\r\n    }\r\n    set value(value){\r\n        this.editableElement.innerText = value;\r\n    }\r\n    constructor() {\r\n        super();\r\n        this.initWebComponent();\r\n    }\r\n    initWebComponent() {\r\n        this._shadowRoot = this.attachShadow({ mode: 'open' });\r\n        this._html = `<style>${CSS}</style>` + '\\n';\r\n        this._element = document.createElement('template');\r\n        this._element.innerHTML = this._html;\r\n        this._shadowRoot.appendChild(this._element.content.cloneNode(true));\r\n        this.parserHelper = new ParserHelper(); \r\n        this.initElement();\r\n    }\r\n    initElement() {\r\n        const inputElem = document.createElement('p');\r\n        inputElem.classList.add('paragraph-input');\r\n        inputElem.addEventListener('keypress', this.onKeyPress.bind(this));\r\n        inputElem.addEventListener('paste', this.onPaste.bind(this));\r\n        inputElem.addEventListener('click', ()=>{this.focus();});\r\n        inputElem.addEventListener('blur',()=>{this.onBlur();});\r\n        this.editableElement = inputElem;\r\n        //this.editableElement.contentEditable = true;\r\n        this._shadowRoot.appendChild(inputElem);\r\n    }\r\n    onKeyPress(e) {\r\n        if (e.key == \"Enter\") {\r\n            e.preventDefault();\r\n            this.callOnEnter();\r\n        }\r\n    }\r\n    onPaste(e) {\r\n        console.log('b');\r\n        const clipboardData = e.clipboardData || window.clipboardData;\r\n        let pastedData = null;\r\n        let valueObj = null;\r\n        if(clipboardData.types.findIndex(x=>x==\"text/html\") !== -1){\r\n            pastedData = clipboardData.getData('text/html');\r\n            valueObj = this.parserHelper.htmlStringToValueObject(pastedData);\r\n        }else if(clipboardData.types.findIndex(x=>x==\"text/plain\") !== -1){\r\n            pastedData = clipboardData.getData('text/plain');\r\n            valueObj = this.parserHelper.textToValueObject(pastedData);\r\n        }\r\n        const selection = this._shadowRoot.getSelection();\r\n        this.setPasteValue(valueObj, selection);\r\n        e.preventDefault();\r\n    }\r\n    setPasteValue(valueObj,selection){\r\n        let currentBlockHTML = \"\";\r\n\r\n        if(typeof valueObj.value == \"string\"){\r\n            currentBlockHTML = valueObj.value;\r\n        }else{\r\n            currentBlockHTML = valueObj.value[0].value;\r\n        }\r\n        if(selection.anchorNode.nodeType === 3){\r\n            // user may select from start to end or end to start so we standrad it.\r\n            let selectionStart = Math.min(selection.anchorOffset, selection.extentOffset);\r\n            let selectionEnd = Math.max(selection.anchorOffset, selection.extentOffset);\r\n            //if selection part is pure text\r\n            const text = this.editableElement.innerText;\r\n            let newText = \"\";\r\n            if(valueObj.value.length > 1){\r\n                //if we have more than one line to paste we cut tail of text and add it to the last item or creae new item for it\r\n                const tailText = text.substr(selectionEnd, text.length-1);\r\n                valueObj.value.push({\r\n                    type:'PARAGRAPH',\r\n                    value:tailText\r\n                });\r\n                newText = text.substr(0,selectionStart)+currentBlockHTML;\r\n            }else{\r\n                newText = text.substr(0,selectionStart)+currentBlockHTML+text.substr(selectionEnd, text.length-1);\r\n            }\r\n            \r\n            this.editableElement.innerText = newText;\r\n            this.callExtraDataEvent(valueObj.value.slice(1,valueObj.value.length),'APPEND_AFTER'); \r\n        }\r\n    }\r\n    callExtraDataEvent(extraData,action){\r\n        debugger;\r\n        //on paste or enter event or etc we have data that wont place in current block and we want editor to place them in a useful manner\r\n        // in this case we send extra data to the editor so editor do the proper action\r\n        const event = new CustomEvent('extraData',{detail:{\r\n            action:action,\r\n            data:extraData\r\n        }});\r\n        this.dispatchEvent(event);\r\n\r\n    }\r\n    callOnEnter() {\r\n        const event = new CustomEvent('enter');\r\n        this.dispatchEvent(event);\r\n    }\r\n    static get observedAttributes() {\r\n        return [];\r\n    }\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        // do something when an attribute has changed\r\n        this.onAttributeChange(name, newValue);\r\n    }\r\n\r\n    onAttributeChange(name, value) {\r\n        // switch (name) {\r\n\r\n        // }\r\n    }\r\n    focus() {\r\n        this.editableElement.contentEditable = true;\r\n        this.editableElement.focus();\r\n    }\r\n    onBlur(){\r\n        this.editableElement.contentEditable = false;\r\n    }\r\n}\r\nconst myElementNotExists = !customElements.get('jb-editor-paragraph-input');\r\nif (myElementNotExists) {\r\n    window.customElements.define('jb-editor-paragraph-input', JBButtonWebComponent);\r\n}\r\n\r\n","import './paragraph-input/ParagraphInput';\r\nclass InputFactory {\r\n    constructor({ createInput, handleExtraData}) {\r\n        this.createInput = createInput;\r\n        this.handleExtraData =handleExtraData;\r\n    }\r\n    getElementIndex(node) {\r\n        var index = 0;\r\n        while ((node = node.previousElementSibling)) {\r\n            index++;\r\n        }\r\n        return index;\r\n    }\r\n    createParagraphInput(value) {\r\n        const inputElem = document.createElement('jb-editor-paragraph-input');\r\n        if(value){\r\n            inputElem.value = value;\r\n        }\r\n        inputElem.addEventListener('enter', (e) => {\r\n            const newIndex = this.getElementIndex(inputElem);\r\n            const createdElement = this.createInput('PARAGRAPH', null, newIndex);\r\n            createdElement.focus();\r\n        });\r\n        inputElem.addEventListener('extraData',(e)=>{\r\n            this.handleExtraData(e);\r\n        });\r\n        return inputElem;\r\n    }\r\n}\r\nexport { InputFactory };","import { InputFactory } from './inputs/InputFactory';\r\nimport HTML from './JBEditor.html';\r\nimport CSS from './JBEditor.scss';\r\nimport { ParserHelper } from './ParserHelper';\r\nclass JBInputWebComponent extends HTMLElement {\r\n    static get formAssociated() { return true; }\r\n    get value() {\r\n        const value = this._elements.content.inputs.map(x=>x.value);\r\n        return this.value;\r\n    }\r\n    constructor() {\r\n        super();\r\n        if(typeof this.attachInternals == \"function\"){\r\n            //some browser dont support attachInternals\r\n            this.internals_ = this.attachInternals();\r\n        }\r\n        this.inputFactory = new InputFactory({\r\n            createInput:this.createInput.bind(this),\r\n            handleExtraData: this.handleExtraData.bind(this)\r\n        });\r\n        this.parserHelper = new ParserHelper();\r\n        this.initWebComponent();\r\n    }\r\n    connectedCallback() {\r\n        // standard web component event that called when all of dom is binded\r\n        this.callOnLoadEvent();\r\n        this.initProp();\r\n        this.callOnInitEvent();\r\n        \r\n    }\r\n    callOnLoadEvent() {\r\n        var event = new CustomEvent('load', { bubbles: true, composed: true });\r\n        this.dispatchEvent(event);\r\n    }\r\n    callOnInitEvent() {\r\n        var event = new CustomEvent('init', { bubbles: true, composed: true });\r\n        this.dispatchEvent(event);\r\n    }\r\n    initWebComponent() {\r\n        this._shadowRoot = this.attachShadow({\r\n            mode: 'open'\r\n        });\r\n        this._html = `<style>${CSS}</style>` + '\\n' + HTML;\r\n        this._element = document.createElement('template');\r\n        this._element.innerHTML = this._html;\r\n        this._shadowRoot.appendChild(this._element.content.cloneNode(true));\r\n        this._elements = {\r\n            content:{\r\n                wrapper:this._shadowRoot.querySelector('.content-wrapper'),\r\n                inputs:[]\r\n            }\r\n        };\r\n        this.initEditor();\r\n        this.registerEventListener();\r\n    }\r\n    initEditor(){\r\n        this._elements.content.wrapper.addEventListener('paste',this.onPaste.bind(this));\r\n        this.createInput();\r\n    }\r\n    onPaste(e){\r\n        const clipboardData = e.clipboardData || window.clipboardData;\r\n        let pastedData = null;\r\n        let valueObj = null;\r\n        if(clipboardData.types.findIndex(x=>x==\"text/html\") !== -1){\r\n            pastedData = clipboardData.getData('text/html');\r\n            valueObj = this.parserHelper.htmlStringToValueObject(pastedData);\r\n        }else if(clipboardData.types.findIndex(x=>x==\"text/plain\") !== -1){\r\n            pastedData = clipboardData.getData('text/plain');\r\n            valueObj = this.parserHelper.textToValueObject(pastedData);\r\n        }\r\n        const selection = this._shadowRoot.getSelection();\r\n        if(selection.type == \"Caret\"){\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n        console.log('a');\r\n        debugger;\r\n        e.preventDefault();\r\n    }\r\n    createInput(type,value,index){\r\n        //create element and add it to wrapper\r\n        const newIndex = index||this._elements.content.inputs.length;\r\n        const inputElem = this.inputFactory.createParagraphInput(value);\r\n        //we add a uniq symbil to every input element so we can find them later by symbol\r\n        inputElem._JBEditorDetail = {\r\n            uniqSymbol: Symbol(),\r\n        };\r\n        if(newIndex == this._elements.content.inputs.length){\r\n            this._elements.content.wrapper.appendChild(inputElem);\r\n        }else{\r\n            this._elements.content.wrapper.insertBefore(inputElem,this._elements.content.wrapper.children[newIndex+1]);\r\n        }\r\n        this._elements.content.inputs.splice(newIndex, 0, inputElem);\r\n\r\n        return inputElem;\r\n    }\r\n    handleExtraData(e){\r\n        debugger;\r\n        const {action, data} = e.detail;\r\n        if(action == \"APPEND_AFTER\"){\r\n            const elemIndex = this.inputFactory.getElementIndex(e.target);\r\n            data.forEach((item)=>{\r\n                this.createInput(item.type,item.value,elemIndex);\r\n            });\r\n        }\r\n    }\r\n    registerEventListener() {\r\n    }\r\n    initProp() {\r\n    }\r\n    static get observedAttributes() {\r\n        return [];\r\n    }\r\n    attributeChangedCallback(name, oldValue, newValue) {\r\n        // do something when an attribute has changed\r\n        this.onAttributeChange(name, newValue);\r\n    }\r\n    onAttributeChange(name, value) {\r\n        // switch (name) {\r\n        // }\r\n    }\r\n\r\n}\r\nconst myElementNotExists = !customElements.get('jb-editor');\r\nif(myElementNotExists){\r\n    window.customElements.define('jb-editor', JBInputWebComponent);\r\n}\r\n"],"names":["ParserHelper","textToValueObject","string","type","value","htmlStringToValueObject","html","elem","document","createRange","createContextualFragment","this","getStandardObjectFromDom","htmlDomToValueObject","dom","obj","extractType","children","length","forEach","element","elementValue","push","innerText","standardFlatValueObject","nodeName","toUpperCase","console","log","valueObject","standardObj","Array","isArray","item","standaredArr","JBButtonWebComponent","HTMLElement","editableElement","constructor","super","initWebComponent","_shadowRoot","attachShadow","mode","_html","_element","createElement","innerHTML","appendChild","content","cloneNode","parserHelper","initElement","inputElem","classList","add","addEventListener","onKeyPress","bind","onPaste","focus","onBlur","e","key","preventDefault","callOnEnter","clipboardData","window","pastedData","valueObj","types","findIndex","x","getData","selection","getSelection","setPasteValue","currentBlockHTML","anchorNode","nodeType","selectionStart","Math","min","anchorOffset","extentOffset","selectionEnd","max","text","newText","tailText","substr","callExtraDataEvent","slice","extraData","action","event","CustomEvent","detail","data","dispatchEvent","observedAttributes","attributeChangedCallback","name","oldValue","newValue","onAttributeChange","contentEditable","customElements","get","define","InputFactory","createInput","handleExtraData","getElementIndex","node","index","previousElementSibling","createParagraphInput","newIndex","JBInputWebComponent","formAssociated","_elements","inputs","map","attachInternals","internals_","inputFactory","connectedCallback","callOnLoadEvent","initProp","callOnInitEvent","bubbles","composed","wrapper","querySelector","initEditor","registerEventListener","_JBEditorDetail","uniqSymbol","Symbol","insertBefore","splice","elemIndex","target"],"mappings":"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"}